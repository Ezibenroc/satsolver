###########################################
# Software versions and compiler options
###########################################

cmake_minimum_required (VERSION 2.6)
project(satsolver)
set(PROJECT_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

find_package(BISON)
find_package(FLEX)

add_definitions(-std=c++0x)
add_definitions(-g -Wall -Wextra -pedantic  -Wcast-qual -Wcast-align -Wconversion -Wdouble-promotion -Wfloat-equal -Wpointer-arith -fmax-errors=2)

include_directories ("${PROJECT_SOURCE_DIR}")
include_directories("${CMAKE_CURRENT_BINARY_DIR}")


###########################################
# Main source code
###########################################


# Structures
############

add_library(Affectation src/structures/affectation.cpp)
add_library(Clause src/structures/clause.cpp)
add_library(Formula src/structures/formula.cpp)
target_link_libraries(Formula Clause Affectation)
add_library(ExtendedFormula src/structures/extended_formula.cpp)
add_library(Graph src/structures/graph.cpp)

add_library(CommandLineParser src/parsers/cli.cpp)

add_library(AbstractParser src/parsers/abstract.cpp)
add_library(SatParser src/parsers/sat.cpp)
target_link_libraries(SatParser AbstractParser Clause Formula)

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/structures.cpp "")
add_library(Structures ${CMAKE_CURRENT_BINARY_DIR}/structures.cpp)
target_link_libraries(Structures Formula Clause Affectation Graph ExtendedFormula)


# Parsers
#########

add_library(GraphParser src/parsers/graph.cpp)
target_link_libraries(GraphParser AbstractParser Graph)

find_package(BISON)
find_package(FLEX)

bison_target(ExtendedFormulaYacc src/parsers/extended_formula.y ${CMAKE_CURRENT_BINARY_DIR}/extended_formula.y.cpp)
flex_target(ExtendedFormulaLex src/parsers/extended_formula.l ${CMAKE_CURRENT_BINARY_DIR}/extended_formula.l.cpp)
add_flex_bison_dependency(ExtendedFormulaLex ExtendedFormulaYacc)
add_library(ExtendedFormulaParser src/parsers/extended_formula.cpp ${BISON_ExtendedFormulaYacc_OUTPUTS} ${FLEX_ExtendedFormulaLex_OUTPUTS})
target_link_libraries(ExtendedFormulaParser ${FLEX_LIBRARIES} ${BISON_LIBRARIES})
#add_library(ExtendedFormulaYacc ${BISON_ExtendedFormulaYacc_OUTPUTS})
#add_library(ExtendedFormulaLex ${FLEX_ExtendedFormulaLex_OUTPUTS})
#add_library(ExtendedFormulaParser src/parsers/extended_formula.cpp )

# Disable warnings for files generated by Flex and Bison…
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/extended_formula.l.cpp PROPERTIES COMPILE_FLAGS "-Wno-conversion -Wno-unused-function")
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/extended_formula.y.cpp PROPERTIES COMPILE_FLAGS -Wno-conversion)

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/parsers.cpp "")
add_library(Parsers ${CMAKE_CURRENT_BINARY_DIR}/parsers.cpp)
target_link_libraries(Parsers SatParser GraphParser ExtendedFormulaParser)


# Solvers
#########

add_library(DPLL src/solvers/dpll.cpp)
target_link_libraries(DPLL Affectation Clause Formula)

add_library(GraphColorSolver src/solvers/graphcolor.cpp)
target_link_libraries(GraphColorSolver Graph ExtendedFormula Formula DPLL)

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/solvers.cpp "")
add_library(Solvers ${CMAKE_CURRENT_BINARY_DIR}/solvers.cpp)
target_link_libraries(Solvers DPLL GraphColorSolver)


add_executable(resol src/entry_points/resol.cpp)
target_link_libraries(resol Affectation Formula SatParser CommandLineParser DPLL)

add_executable(colorie src/entry_points/colorie.cpp)
target_link_libraries(colorie GraphParser CommandLineParser GraphColorSolver)

add_executable(tseitin src/entry_points/tseitin.cpp)
target_link_libraries(tseitin CommandLineParser ExtendedFormula Formula DPLL ExtendedFormulaParser)



###########################################
# Benchmarks
###########################################

file(GLOB HelperFiles ${CMAKE_SOURCE_DIR}/benchmarks/* ${CMAKE_SOURCE_DIR}/check_result.py)

add_custom_target(Helpers)
foreach(HelperFile ${HelperFiles})
    add_custom_command(TARGET Helpers PRE_BUILD
                     COMMAND ${CMAKE_COMMAND} -E
                     copy ${HelperFile} ${CMAKE_CURRENT_BINARY_DIR})
endforeach()

#add_ocaml_executable(generator SOURCES generator.ml)

add_custom_target(generator
    COMMAND ocamlopt ${CMAKE_SOURCE_DIR}/generator.ml -o ${CMAKE_CURRENT_BINARY_DIR}/generator
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    SOURCES ${CMAKE_SOURCE_DIR}/generator.ml)

add_custom_target(Benchmarks DEPENDS Helpers resol colorie tseitin)

###########################################
# Unit tests
###########################################

find_package(CppUnit)
if (CPPUNIT_FOUND)

    add_executable(testrunner tests/main.cpp tests/structures_tests.cpp tests/heuristics_tests.cpp tests/dpll_tests.cpp tests/satparser_tests tests/graphparser_tests.cpp tests/graphsolver_tests.cpp)
    target_link_libraries(testrunner Structures Parsers Solvers)
    target_link_libraries(testrunner cppunit)
else (CPPUNIT_FOUND)
    message("+---------------------------------------------+")
    message("| CppUnit not found, tests won’t be compiled. |")
    message("+---------------------------------------------+")
endif (CPPUNIT_FOUND)
